// Generated by CoffeeScript 1.7.1
var account, accountSchema, category, categorySchema, config, entry, entrySchema, eventEmitter, passport, sha1;

config = require('../config');

sha1 = require('sha1');

eventEmitter = require('events').EventEmitter;

passport = require('passport');

entry = require('../models/blog').Entry;

entrySchema = require('../models/blog').Schema;

category = require('../models/category').Category;

categorySchema = require('../models/category').Schema;

account = require('../models/account').Account;

accountSchema = require('../models/account').Schema;

module.exports = {
  blog: function(app) {
    app.get('/blog', function(req, res) {
      return res.render('blog');
    });
    app.get('/blog/posts/:s/:l/posts.json', function(req, res) {
      return entry.find({}, null, {
        'skip': req.params.s,
        'limit': req.params.l
      }).sort({
        creationDate: 'desc'
      }).exec(function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.get('/blog/post/:id.json', function(req, res) {
      return entry.find({
        "id": req.params.id
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error',
            type: '404'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.post('/blog/post/:id.json', function(req, res) {
      var newPost;
      newPost = new entry({
        title: req.body.title,
        author: req.body.author,
        id: req.params.id,
        body: req.body.body,
        tags: req.body.tags,
        category: 'test',
        comments: [],
        creationDate: new Date(),
        updateDate: null,
        published: req.body.published
      });
      return newPost.save(function(err) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.put('/blog/post/:id.json', function(req, res) {
      return entry.findOneAndUpdate({
        'id': req.params.id
      }, req.body, {
        "new": true
      }, function(err, data) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.del('/blog/post/:id.json', function(req, res) {
      return entry.remove({
        'id': req.params.id
      }, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.get('/blog/tag/:name/posts.json', function(req, res) {
      return entry.find({
        'tags.name': req.params.name
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    return app.get('/blog/category/:name/posts.json', function(req, res) {
      return entry.find({
        'category': req.params.name
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
  },
  site: function(app) {
    var i, _results;
    _results = [];
    for (i in config.routes) {
      _results.push(app.get(config.routes[i].path, function(req, res) {
        return res.render(config.routes[i].view, {
          title: config.title,
          config: config,
          request: req
        });
      }));
    }
    return _results;
  },
  login: function(app) {
    app.get('/signup', function(req, res) {
      return res.render('signup', {
        title: 'Disko'
      });
    });
    app.post('/signup', function(req, res) {
      return account.register(new account({
        username: req.body.username
      }), req.body.password, function(err, account) {
        if (err) {
          res.render('signup', {
            info: 'Sorry. That username already exists. Try again.'
          });
        }
        return passport.authenticate('local', function(req, res) {
          return res.redirect('/');
        });
      });
    });
    app.get('/login', function(req, res) {
      return res.render('login', {
        title: 'Disko',
        user: req.user
      });
    });
    app.post('/login', passport.authenticate('local', function(req, res) {
      return res.redirect('/');
    }));
    return app.get('/logout', function(req, res) {
      req.logout();
      return res.redirect('/');
    });
  },
  error: function(app) {
    return app.get('/error/:error', function(req, res) {
      return res.render('error');
    });
  }
};
