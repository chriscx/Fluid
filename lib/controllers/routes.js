// Generated by CoffeeScript 1.7.1
var Account, Category, Entry, Page, config, eventEmitter, passport, sha1;

config = require('../config');

sha1 = require('sha1');

eventEmitter = require('events').EventEmitter;

passport = require('passport');

Entry = require('../models/blog').Entry;

Category = require('../models/category').Category;

Account = require('../models/account').Account;

Page = require('../models/page').Page;

module.exports = {
  blog: function(app) {
    app.get('/blog', function(req, res) {
      return res.render('blog');
    });
    app.get('/blog/posts/:s/:l/posts.json', function(req, res) {
      return Entry.find({}, null, {
        'skip': req.params.s,
        'limit': req.params.l
      }).sort({
        creationDate: 'desc'
      }).exec(function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.get('/blog/post/:slug.json', function(req, res) {
      return Entry.find({
        "slug": req.params.slug
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error',
            type: '404'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.post('/blog/post/:slug.json', function(req, res) {
      var newPost;
      newPost = new Entry({
        title: req.body.title,
        author: req.body.author,
        slug: req.params.slug,
        body: req.body.body,
        tags: req.body.tags,
        Category: 'test',
        comments: [],
        creationDate: new Date(),
        updateDate: null,
        published: req.body.published
      });
      return newPost.save(function(err) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.put('/blog/post/:slug.json', function(req, res) {
      console.log('update -> ');
      console.log(req.body);
      return Entry.findOneAndUpdate({
        'slug': req.params.slug
      }, req.body, {
        "new": true
      }, function(err, data) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.del('/blog/post/:slug.json', function(req, res) {
      return Entry.remove({
        'slug': req.params.slug
      }, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.get('/blog/tag/:name/posts.json', function(req, res) {
      return Entry.find({
        'tags.name': req.params.name
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.get('/blog/category/:name/posts.json', function(req, res) {
      return Entry.find({
        'category': req.params.name
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            entries: data
          });
        }
      });
    });
    app.get('/blog/categories.json', function(req, res) {
      return Category.find({}, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            categories: data
          });
        }
      });
    });
    app.get('/blog/category/:name.json', function(req, res) {
      return Category.find({
        name: req.params.name
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            category: data
          });
        }
      });
    });
    app.post('/blog/category/:name.json', function(req, res) {
      var newCategory;
      newCategory = new Category({
        name: req.body.name,
        description: req.body.description
      });
      return newCategory.save(function(err) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.put('/blog/category/:name.json', function(req, res) {
      return Category.findOneAndUpdate({
        'name': req.params.name
      }, req.body, {
        "new": true
      }, function(err, data) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    return app.del('/blog/category/:name.json', function(req, res) {
      return Category.remove({
        'name': req.params.name
      }, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
  },
  login: function(app) {
    app.get('/signup', function(req, res) {
      return res.render('signup', {
        title: 'Fluid'
      });
    });
    app.post('/signup', function(req, res) {
      return Account.register(new Account({
        username: req.body.username
      }), req.body.password, function(err, Account) {
        if (err) {
          res.render('signup', {
            info: 'Sorry. That username already exists. Try again.'
          });
        }
        return passport.authenticate('local', function(req, res) {
          return res.redirect('/');
        });
      });
    });
    app.get('/login', function(req, res) {
      return res.render('login', {
        title: 'Disko',
        user: req.user
      });
    });
    app.post('/login', passport.authenticate('local', function(req, res) {
      return res.redirect('/');
    }));
    return app.get('/logout', function(req, res) {
      req.logout();
      return res.redirect('/');
    });
  },
  error: function(app) {
    return app.get('/error/:error', function(req, res) {
      return res.render('error');
    });
  },
  site: function(app) {
    app.get('/', function(req, res) {
      return res.render('index');
    });
    app.get('/admin', function(req, res) {
      return res.render('admin');
    });
    app.get('/page/:route.json', function(req, res) {
      return Page.find({
        route: req.params.route
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            page: data
          });
        }
      });
    });
    app.post('/page/:route.json', function(req, res) {
      var newPage;
      newPage = new Page({
        title: req.body.title,
        author: req.body.author,
        route: req.params.route,
        body: req.body.body,
        creationDate: new Date(),
        updateDate: null,
        published: req.body.published
      });
      return newPage.save(function(err) {
        if (!err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.put('/page/:route.json', function(req, res) {
      console.log('update -> ');
      console.log(req.body);
      return Page.findOneAndUpdate({
        route: req.params.route
      }, req.body, {
        "new": true
      }, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            page: data
          });
        }
      });
    });
    app.del('/page/:route.json', function(req, res) {
      return Page.remove({
        route: req.params.route
      }, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: 'OK'
          });
        } else {
          return res.json({
            result: 'error',
            err: err
          });
        }
      });
    });
    app.get('/pages.json', function(req, res) {
      return Page.find({}, function(err, data) {
        if (err) {
          return res.json({
            result: 'error'
          });
        } else {
          return res.json({
            result: 'OK',
            pages: data
          });
        }
      });
    });
    return app.get('/:route', function(req, res) {
      return Page.find({
        route: req.params.route
      }, function(err, data) {
        if (err) {
          return res.redirect('/error/501');
        } else if (data.length = 0) {
          return res.redirect('/error/404');
        } else {
          return res.render('page');
        }
      });
    });
  }
};
