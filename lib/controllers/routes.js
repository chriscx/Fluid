// Generated by CoffeeScript 1.7.1
var config, eventEmitter, sha1;

config = require("../config");

sha1 = require("sha1");

eventEmitter = require("events").EventEmitter;

module.exports = {
  blog: function(app) {
    app.get("/blog", function(req, res) {
      return res.render("blog");
    });
    app.get("/blog/posts/:l/:s", function(req, res) {
      return blog.getEntries(req.params.l, req.params.s, function(err, entries) {
        if (err) {
          return res.json({
            error: 404
          });
        } else {
          return res.json({
            result: "OK",
            entries: entries
          });
        }
      });
    });
    app.get("/blog/post/:uri", function(req, res) {
      return res.render("post");
    });
    app.post("/blog/post/create", function(req, res) {
      var entry;
      entry = {
        title: req.body.title,
        author: req.session.userId,
        url: encodeURI(req.body.title.toLowerCase()),
        body: "",
        tags: [],
        category: null,
        comments: [],
        creationDate: new Date(),
        updateDate: null,
        published: true
      };
      return blog.createEntry(entry, function(err, data) {
        if (err) {
          res.json({
            result: "error",
            error: err
          });
        }
        return res.json({
          result: "OK",
          newEntry: data
        });
      });
    });
    app.put("/blog/post/:id", function(req, res) {
      return blog.editEntry(req.params.id, req.body, function(err, data) {
        if (!err) {
          return res.json({
            result: "OK"
          });
        } else {
          return res.json({
            result: "error",
            err: err
          });
        }
      });
    });
    app.del("/blog/post/:id", function(req, res) {
      return blog.removeEntry(req.params.id, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: "OK"
          });
        } else {
          return res.json({
            result: "error",
            err: err
          });
        }
      });
    });
    app.get("/blog/tag/:name", function(req, res) {
      return res.render("blog");
    });
    return app.get("/blog/category/:name", function(req, res) {
      return res.render("blog");
    });
  },
  site: function(app) {
    var i, _results;
    _results = [];
    for (i in config.routes) {
      _results.push(app.get(config.routes[i].path, function(req, res) {
        return res.render(config.routes[i].view, {
          title: config.title,
          config: config,
          request: req
        });
      }));
    }
    return _results;
  },
  login: function(app) {},
  error: function(app) {
    return app.get("/error/:error", function(req, res) {
      return res.render("error");
    });
  }
};
