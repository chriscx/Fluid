// Generated by CoffeeScript 1.7.1
var blog, checkAuth, config, eventEmitter, sha1, user;

user = require("../lib/user");

blog = require("../lib/blog");

config = require("../config");

sha1 = require("sha1");

eventEmitter = require("events").EventEmitter;

checkAuth = function(req, res, next) {
  var actualTimestamp;
  actualTimestamp = void 0;
  actualTimestamp = (new Date()).getTime();
  if (!(req.session.logged_in === true && actualTimestamp < req.session.expirationDate)) {
    return res.redirect("/login");
  } else {
    return next();
  }
};

module.exports = {
  blog: function(app) {
    app.get("/blog", function(req, res) {
      var categories, check, entries, eventflow, tags;
      check = 0;
      categories = void 0;
      tags = void 0;
      entries = void 0;
      eventflow = new eventEmitter();
      blog.getCategories(function(err, cat) {
        categories = cat;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getEntries(5, 0, function(err, ent) {
        entries = ent;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getTags(function(err, tag) {
        tags = tag;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      return eventflow.on("render", function() {
        return res.render("blog", {
          entries: entries,
          categories: categories,
          tags: tags,
          config: config,
          request: req
        });
      });
    });
    app.get("/blog/posts/:l/:s", function(req, res) {
      return blog.getEntries(req.params.l, req.params.s, function(err, entries) {
        if (err) {
          return res.json({
            error: 404
          });
        } else {
          return res.json({
            result: "OK",
            entries: entries
          });
        }
      });
    });
    app.get("/blog/post/:uri", function(req, res) {
      var categories, check, entry, eventflow, tags;
      check = 0;
      categories = void 0;
      tags = void 0;
      entry = void 0;
      eventflow = new eventEmitter();
      blog.getCategories(function(err, cat) {
        categories = cat;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getEntry({
        title: req.params.uri
      }, function(err, ent) {
        entry = ent;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getTags(function(err, tag) {
        tags = tag;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      return eventflow.on("render", function() {
        return res.render("post", {
          entry: entry,
          categories: categories,
          tags: tags,
          config: config,
          request: req
        });
      });
    });
    app.post("/blog/post/create", checkAuth, function(req, res) {
      var entry;
      entry = {
        title: req.body.title,
        author: req.session.userId,
        url: encodeURI(req.body.title.toLowerCase()),
        body: "",
        tags: [],
        category: null,
        comments: [],
        creationDate: new Date(),
        updateDate: null,
        published: true
      };
      return blog.createEntry(entry, function(err, data) {
        if (err) {
          res.json({
            result: "error",
            error: err
          });
        }
        return res.json({
          result: "OK",
          newEntry: data
        });
      });
    });
    app.put("/blog/post/:id", checkAuth, function(req, res) {
      return blog.editEntry(req.params.id, req.body, function(err, data) {
        if (!err) {
          return res.json({
            result: "OK"
          });
        } else {
          return res.json({
            result: "error",
            err: err
          });
        }
      });
    });
    app.del("/blog/post/:id", checkAuth, function(req, res) {
      return blog.removeEntry(req.params.id, function(err, data) {
        if (data > 0 && !err) {
          return res.json({
            result: "OK"
          });
        } else {
          return res.json({
            result: "error",
            err: err
          });
        }
      });
    });
    app.get("/blog/tag/:name", function(req, res) {
      var categories, check, entries, eventflow, tags;
      check = 0;
      categories = void 0;
      tags = void 0;
      entries = void 0;
      eventflow = new eventEmitter();
      blog.getCategories(function(err, cat) {
        categories = cat;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getEntry({
        "tags.name": req.params.name
      }, function(err, ent) {
        entries = ent;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getTags(function(err, tag) {
        tags = tag;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      return eventflow.on("render", function() {
        return res.render("blog", {
          entries: entries,
          categories: categories,
          tags: tags,
          config: config,
          request: req
        });
      });
    });
    return app.get("/blog/category/:name", function(req, res) {
      var categories, check, entries, eventflow, tags;
      check = 0;
      categories = void 0;
      tags = void 0;
      entries = void 0;
      eventflow = new eventEmitter();
      blog.getCategories(function(err, cat) {
        categories = cat;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getEntry({
        category: req.params.name
      }, function(err, ent) {
        entries = ent;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      blog.getTags(function(err, tag) {
        tags = tag;
        check++;
        if (check === 3) {
          return eventflow.emit("render");
        }
      });
      return eventflow.on("render", function() {
        return res.render("blog", {
          entries: entries,
          categories: categories,
          tags: tags,
          config: config,
          request: req
        });
      });
    });
  },
  site: function(app) {
    var i, _results;
    _results = [];
    for (i in config.routes) {
      _results.push(app.get(config.routes[i].path, function(req, res) {
        return res.render(config.routes[i].view, {
          title: config.title,
          config: config,
          request: req
        });
      }));
    }
    return _results;
  },
  login: function(app) {
    app.get("/admin", function(req, res) {
      var categories, check, entries, eventflow, tags;
      check = 0;
      categories = void 0;
      tags = void 0;
      entries = void 0;
      eventflow = new eventEmitter();
      blog.getCategories(function(err, cat) {
        categories = cat;
        check++;
        if (check === 3) {
          eventflow.emit("render");
        }
      });
      blog.getEntries(5, 0, function(err, ent) {
        entries = ent;
        check++;
        if (check === 3) {
          eventflow.emit("render");
        }
      });
      blog.getTags(function(err, tag) {
        tags = tag;
        check++;
        if (check === 3) {
          eventflow.emit("render");
        }
      });
      return eventflow.on("render", function() {
        return res.render("admin", {
          entries: entries,
          categories: categories,
          tags: tags,
          config: config,
          request: req
        });
      });
    });
    app.get("/login", function(req, res) {
      return res.render("login", {
        title: "Fluid",
        config: config,
        request: req
      });
    });
    app.post("/login", function(req, res, next) {
      var _data;
      _data = void 0;
      _data = null;
      return user.checkPassword(req.body.login, sha1(req.body.password), function(err, data) {
        var expirationTimestamp;
        expirationTimestamp = void 0;
        if (err) {
          return next(err);
        }
        if (data.check) {
          req.session.logged_in = true;
          req.session.userId = data.userId;
          expirationTimestamp = (new Date()).getTime();
          req.session.expirationDate = expirationTimestamp + 30 * 60 * 1000;
          req.session.login = req.body.email;
          return res.redirect("/");
        } else {
          return res.redirect("/login");
        }
      });
    });
    return app.get("/logout", checkAuth, function(req, res) {
      delete req.session.logged_in;
      return res.redirect("/login");
    });
  },
  error: function(app) {
    return app.get("/error/:error", function(req, res) {
      return res.render("error", {
        error: req.param.error,
        config: config,
        request: req
      });
    });
  }
};
